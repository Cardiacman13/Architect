#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

print_step() {
    terminal_width=$(tput cols)
    text_length=${#1}
    num_equals=$(((terminal_width - text_length - 2) / 2))
    equals=$(printf "%${num_equals}s" " " | tr ' ' '=')
    echo -e "${BLUE}${equals} ${1} ${equals}${NC}"
    sleep 1
}

if [ ! -t 1 ]; then
  konsole -e "$0" "$@"
  exit 0
fi

# Mettre à jour le système
print_step "Mise à jour du système"
sudo pacman -Syu --noconfirm

# Mettre à jour la configuration de pacman
print_step "Optimiser pacman"
sudo sed -i 's/^#Color/Color/' /etc/pacman.conf
sudo sed -i 's/^#VerbosePkgLists/VerbosePkgLists/' /etc/pacman.conf
sudo sed -i 's/^#ParallelDownloads = 5/ParallelDownloads = 5/' /etc/pacman.conf
sudo sed -i 's/^#IgnorePkg   =/IgnorePkg   = amdvlk lib32-amdvlk/' /etc/pacman.conf

print_step "Installation des headers pour les kernels installés"
for kernel in $(ls /boot | grep vmlinuz); do
    kernel_name=$(echo $kernel | sed -e 's/vmlinuz-//')
    echo "Installation des en-têtes pour $kernel_name..."
    sudo pacman -Suy --needed --noconfirm "${kernel_name}-headers"
done

echo "Tous les headers ont été installés."

print_step "Augmenter la compatibilité des jeux Windows"
echo "vm.max_map_count=16777216" | sudo tee -a /etc/sysctl.d/99-sysctl.conf

# Installer yay
print_step "Installation de yay"
sudo pacman -S --needed --noconfirm git base-devel
git clone https://aur.archlinux.org/yay-bin.git
cd yay-bin || exit 1
makepkg -si --noconfirm
cd .. || exit 1
rm -rf yay-bin

# Alias de maintenance
print_step "Alias maintenance"
echo 'alias u="sudo pacman -Syy && yay -S archlinux-keyring && yay && yay -Sc && sudo pacman -Rns \$(pacman -Qdtq)"' >> $HOME/.bashrc
source $HOME/.bashrc

# Installation de pipewire (son)
print_step "Installation de pipewire"
sudo pacman -Rdd --noconfirm pulseaudio jack2 pipewire-media-session
sudo pacman -S --needed --noconfirm pipewire pipewire-pulse pipewire-alsa pipewire-jack wireplumber

# Détecter Nvidia ou AMD
read -p "Quel carte graphique avez-vous ? (1: nvidia, 2: amd/intel, 3: les deux, 4: aucun): " gpu
if [[ $gpu == "1" ]]; then
    nvidia=true
elif [[ $gpu == "2" ]]; then
    amd=true
elif [[ $gpu == "3" ]]; then
    nvidia=true
    amd=true
fi

if [[ $nvidia ]]; then
    print_step "Installation des pilotes NVIDIA"
    yay -S --needed --noconfirm nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loader cuda
    echo "Activation de nvidia-drm.modeset=1..."
    sudo sed -i '/^options/ s/\"$/ nvidia-drm.modeset=1"/' /boot/loader/entries/*.conf
    echo "Charger les modules Nvidia en priorité au lancement de Arch"
    sudo sed -i '/^MODULES/ s/()/(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
    echo "Configuration du module mkinitcpio..."
    sudo mkdir -p /etc/pacman.d/hooks/
    echo "[Trigger]
    Operation=Install
    Operation=Upgrade
    Operation=Remove
    Type=Package
    Target=nvidia-dkms
    Target = linux
    Target = linux-next*
    Target = linux-new*
    Target = linux-amd*
    Target = linux-lts*
    Target = linux-zen*
    Target = linux-rt*
    Target = linux-hardened*
    Target = linux-xanmod*
    Target = linux-tkg*
    Target = linux-raven*
    Target = linux-slim*
    Target = linux-test*
    Target = linux-main*
    Target = linux-dctxmei*
    Target = linux-froidzen*
    Target = linux-jwrdegoede*
    Target=nvidia
    Target=nvidia-lts
    Target=nvidia-dkms
    Target=nvidia-beta
    Target=nvidia-340xx
    Target=nvidia-390xx
    Target=dkms

    [Action]
    Description=Update NVIDIA module in initcpio
    Depends=mkinitcpio
    When=PostTransaction
    NeedsTargets
    Exec=/bin/sh -c 'while read -r trg; do case $trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -P'" | sudo tee /etc/pacman.d/hooks/nvidia.hook > /dev/null
    echo "Configuration terminée pour NVIDIA."
fi

if [[ $amd ]]; then
    print_step "Installation des pilotes AMD"
    yay -S --needed --noconfirm mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader
    echo "Configuration terminée pour AMD."
fi

# Installation des packets indispensables
print_step "Installation des packets indispensables"
sudo pacman -S --needed --noconfirm mkinitcpio-firmware xdg-desktop-portal neofetch power-profiles-daemon lib32-pipewire hunspell-fr p7zip unrar ttf-liberation noto-fonts noto-fonts-emoji ntfs-3g fuse2 bash-completion

# Installation des drivers manettes
print_step "Installation des drivers manettes (Xbox, etc...)"
read -p "Voulez-vous installer les drivers pour les manettes ? (y/n): " gamepad
if [[ $gamepad == "y" ]]; then
    yay -S --needed --noconfirm xpadneo-dkms
fi

# Activation du bluetooth
print_step "Activation du bluetooth"
read -p "Voulez-vous installer le support pour Bluetooth ? (y/n): " bluetooth
if [[ $bluetooth == "y" ]]; then
    yay -S --needed --noconfirm bluez bluez-utils bluez-plugins
    sudo systemctl enable --now bluetooth.service
fi

# Installation de la suite bureautique
print_step "Installation de la suite bureautique"
sudo pacman -S --needed --noconfirm gnome-disk-utility vlc

# Installation des drivers pour les imprimantes
print_step "Installation du support pour les imprimantes"
read -p "Voulez-vous installer le support pour les imprimantes ? (y/n): " printer
if [[ $printer == "y" ]]; then
    yay -S --needed --noconfirm ghostscript gsfonts cups cups-filters cups-pdf system-config-printer avahi
    sudo systemctl enable --now avahi-daemon
    sudo systemctl enable --now cups
fi

# Installation des logiciels de tiers
print_step "Installation de logiciels de base"
read -p "Voulez-vous installer des logiciels divers ? (y/n): " software
if [[ $software == "y" ]]; then
    yay -S --needed --noconfirm libreoffice-fresh libreoffice-fresh-fr discord gimp obs-studio kdenlive 
fi

# Installation du shell Fish
print_step "Installation de Fish"
read -p "Voulez-vous installer le shell Fish ? (y/n): " fish
if [[ $fish == "y" ]]; then
    yay -S --needed --noconfirm fish
    if [[ $SHELL != "/usr/bin/fish" ]]; then
        chsh -s /usr/bin/fish
    fi
    echo 'alias u="sudo pacman -Syy && yay -S archlinux-keyring && yay && yay -Sc && sudo pacman -Rns \$(pacman -Qdtq)"' >> $HOME/.config/fish/config.fish
fi

# Installation de flatpak
print_step "Installation de Flatpak"
read -p "Voulez-vous installer Flatpak ? (y/n): " flatpak
if [[ $flatpak == "y" ]]; then
    yay -S --needed --noconfirm flatpak flatpak-kcm
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
fi

# Installation et configuration du pare-feu
print_step "Installation du pare-feu"
sudo pacman -S --needed --noconfirm ufw
sudo systemctl enable --now ufw.service

# Installation de Steam et Lutris
print_step "Installation de Steam et Lutris"
yay -S --needed --noconfirm steam lutris

sudo sed -i 's/^IgnorePkg   = amdvlk lib32-amdvlk/#IgnorePkg   =/' /etc/pacman.conf

print_step "Le script est terminé. N'oubliez pas de redémarrer votre système."
