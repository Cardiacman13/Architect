#!/usr/bin/env bash

sudo -v

if [ $? -eq 0 ]; then
    echo "--------------------------------------------------"
    echo "|- Authentification réussie."
    echo "--------------------------------------------------"
else
    echo "--------------------------------------------------"
    echo "|- Authentification échouée."
    echo "--------------------------------------------------"
    exit 1
fi

GREEN='\e[38;2;11;249;163m'     # Green color
RED='\e[31m'                    # Red color
PURPLE='\033[38;2;180;130;255m' # Purple color
RESET='\e[0m'                   # Reset color

source src/setup/graphic_card.sh
source src/setup/packages.sh
source src/setup/peripheries.sh
source src/setup/shell.sh
source src/setup/software.sh
source src/setup/system_setup.sh

# This function installs the AUR helper 'yay' if it is not already installed.
# It clones the 'yay-bin' repository from AUR, compiles it, and installs it using 'makepkg'.
# The cloned repository is then removed to free up disk space.
function install_aur_helper() {
    if ! command -v yay &> /dev/null; then
        echo "Installation de yay"
        git clone https://aur.archlinux.org/yay-bin.git >> /dev/null 2>&1
        cd yay-bin || exit
        echo "|- Compilation de yay"
        makepkg -si --noconfirm >> /dev/null 2>&1
        cd .. || exit
        rm -rf yay-bin >> /dev/null 2>&1
        echo "--------------------------------------------------"
    fi
}

# This function displays a welcome message to the user and prompts them to continue with the script or cancel it.
# It also provides information about the script and its author.
# If the user chooses to cancel, the script exits with status code 0.
function welcome_msg() {
    clear
    echo -e "${GREEN}Bienvenue dans le script post-installation d'Arch Linux !${RESET}"
    echo -e "-----------------------------------------------------------------------------------------------------------

       ${PURPLE}%%%%%%%%%%${RESET}  ${GREEN}*********${RESET}            
       ${PURPLE}%%%${RESET}                 ${GREEN}******${RESET}       
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      Script post-installation Arch Linux
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      GitHub : https://github.com/Cardiacman13/Tuto-Arch
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      Par https://github.com/Cardiacman13
        ${PURPLE}%%%%%%${RESET}                 ${GREEN}***${RESET}       et https://github.com/wmemcpy
             ${PURPLE}%%%%%%%%${RESET}  ${GREEN}***********${RESET}     

-----------------------------------------------------------------------------------------------------------\n"
    sleep 1
    echo -e "${RED}Ce script va effectuer des modifications sur votre système.${RESET}"
    echo -e "Certaines étapes peuvent prendre du temps en fonction de votre connexion internet et de votre CPU.\nAppuyez sur ${GREEN}Entrée${RESET} pour continuer ou ${GREEN}Ctrl+C${RESET} pour annuler."
    read -p "" choice
    if [[ $choice != "" ]]; then
        exit 0
    fi
}

# This function displays a message indicating that the script has finished running and prompts the user to reboot the system.
# If the user chooses to reboot, a timer is started and the system is rebooted after the timer expires.
# If the user chooses not to reboot, the function exits without doing anything.
# Arguments:
#   $1: The number of seconds to wait before rebooting the system (optional, default is 0).
function reboot_timer() {
    local timer=$1

    echo -e "${RED}Le script est terminé, le système doit redémarrer${RESET} : Appuyez sur ${GREEN}Entrée${RESET} pour redémarrer ou ${GREEN}Ctrl+C${RESET} pour annuler."
    read -p "" choice
    if [[ "${choice}" == "" ]]; then
        while [[ ${timer} -gt 0 ]]; do
            echo -e "${RED}Redémarrage dans ${timer} secondes...${RESET}"
            sleep 1
            ((timer--))
        done
    fi
    sudo reboot
}

# This function performs post-installation tasks for an Arch Linux system.
# It updates the system, sets up multilib if necessary, updates the mirrorlist,
# installs git and an AUR helper, and runs several other setup functions.
# It also prints the time it took to run the script and schedules a reboot.
function main() {
    local start_time=$(date +%s)

    sudo pacman -Syyu --noconfirm
    welcome_msg

    if grep -q "^#\[multilib\]" "/etc/pacman.conf"; then
        sudo sed -i '/^#\[multilib\]/,/^#Include = \/etc\/pacman.d\/mirrorlist/ s/^#//' "/etc/pacman.conf"
    fi

    echo -e "|- Mise à jour des mirroirs. ${RED}(long)${RESET}"
    sudo pacman -S --needed --noconfirm reflector >> /dev/null 2>&1
    sudo reflector --score 20 --fastest 5 --sort rate --save /etc/pacman.d/mirrorlist >> /dev/null 2>&1
    sudo pacman -Syy >> /dev/null 2>&1

    install_aur_helper

    system_setup            # 1
    install_video_drivers   # 2
    chose_shell             # 3
    install_peripheries     # 4
    install_useful_packages # 5
    install_useful_software # 6

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    echo -e "${GREEN}Le script à mis ${duration} secondes à s'exécuter.${RESET}"
    reboot_timer 10
}

main
