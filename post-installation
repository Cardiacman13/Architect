#!/usr/bin/env bash

# ====================================== Définitions des couleurs ======================================

# Définition des couleurs
GREEN=$(tput setaf 2)  # Vert
PURPLE=$(tput setaf 5) # Violet
RED=$(tput setaf 1)    # Rouge
RESET=$(tput sgr0)     # Réinitialiser

# ============================================= Vérifications sudo ==============================================

# Vérification des privilèges root
if sudo -v; then
    echo -e "${GREEN}Authentification réussie.${RESET}"
else
    echo -e "${RED}Échec de l'authentification. Le script nécessite des privilèges root pour s'exécuter.${RESET}"
    exit 1
fi

# =========================================== Imports ===========================================

# Importation des scripts de configuration
source src/setup/aur_helper.sh
source src/setup/graphic_card.sh
source src/setup/packages.sh
source src/setup/peripheries.sh
source src/setup/shell.sh
source src/setup/software.sh
source src/setup/system_setup.sh
source src/setup/reboot_timer.sh

# ============================================= Fonction message de bienvenue =============================================

# Fonction pour afficher le message de bienvenue
function welcome_msg() {
    clear
    echo -e "${GREEN}Bienvenue dans le script de post-installation Arch Linux !${RESET}"
    echo -e "-----------------------------------------------------------------------------------------------------------

       ${PURPLE}%%%%%%%%%%${RESET}  ${GREEN}*********${RESET}            
       ${PURPLE}%%%${RESET}                 ${GREEN}******${RESET}       
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      Script de post-installation Arch Linux
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      GitHub : https://github.com/Cardiacman13/Tuto-Arch
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      
       ${PURPLE}%%%${RESET}                     ${GREEN}***${RESET}      Par https://github.com/Cardiacman13
        ${PURPLE}%%%%%%${RESET}                 ${GREEN}***${RESET}       et https://github.com/wmemcpy
             ${PURPLE}%%%%%%%%${RESET}  ${GREEN}***********${RESET}     

-----------------------------------------------------------------------------------------------------------\n"
    sleep 1
    echo -e "${RED}Ce script va apporter des modifications à votre système.${RESET}"
    echo -e "Certaines étapes peuvent prendre du temps en fonction de votre connexion Internet et de votre CPU.\nAppuyez sur ${GREEN}Entrée${RESET} pour continuer ou sur ${GREEN}Ctrl+C${RESET} pour annuler."
    read -p "" choice
    if [[ $choice != "" ]]; then
        exit 0
    fi
}

# ============================================ Fonction principale ============================================

# Fonction principale
function main() {
    local start_time=$(date +%s)

    # Mise à jour des paquets
    echo -e "|- Mise à jour des paquets."
    if sudo pacman -Syyu --noconfirm; then
        echo -e "${GREEN}Mise à jour réussie.${RESET}"
    else
        echo -e "${RED}Échec de la mise à jour.${RESET}"
        exit 1
    fi

    welcome_msg

    # Activation du dépôt multilib si nécessaire
    if grep -q "^#\[multilib\]" "/etc/pacman.conf"; then
        echo -e "|- Activation du dépôt multilib."
        sudo sed -i '/^#\[multilib\]/,/^#Include = \/etc\/pacman.d\/mirrorlist/ s/^#//' "/etc/pacman.conf"
    fi

    # Mise à jour des miroirs
    echo -e "|- Mise à jour des miroirs. ${RED}(cela peut prendre un certain temps)${RESET}"
    sudo pacman -S --needed --noconfirm reflector >> /dev/null 2>&1
    if sudo reflector --score 20 --fastest 5 --sort rate --save /etc/pacman.d/mirrorlist >> /dev/null 2>&1; then
        echo -e "${GREEN}Miroirs mis à jour avec succès !${RESET}"
    else
        echo -e "${RED}Mise à jour des miroirs échouée.${RESET}"
    fi

    sudo pacman -Syy >> /dev/null 2>&1

    # Exécution des scripts de configuration
    install_aur_helper      # 1
    system_setup            # 2
    install_video_drivers   # 3
    chose_shell             # 4
    install_peripheries     # 5
    install_useful_packages # 6
    install_useful_software # 7

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    # Affichage de la durée d'exécution du script
    echo -e "${GREEN}Le script a pris ${duration} secondes à s'exécuter.${RESET}"
    reboot_timer 10
}

main
